_lrotl
^^^^^^
:Tech: Other
:Category: Shift
:Header: immintrin.h
:Return Type: unsigned long
:Param Types:
    unsigned long a, 
    int shift
:Param ETypes:
    UI32 a, 
    IMM shift

.. code-block:: C

    unsigned long _lrotl(unsigned long a, int shift);

.. admonition:: Intel Description

    Shift the bits of unsigned long integer "a" left by the number of bits specified in "shift", rotating the most-significant bit to the least-significant bit location, and store the unsigned result in "dst".

.. admonition:: Intel Implementation Psudeo-Code

    .. code-block:: text

        // size := 32 or 64
        dst := a
        count := shift AND (size - 1)
        DO WHILE (count > 0)
        	tmp[0] := dst[size - 1]
        	dst := (dst << 1) OR tmp[0]
        	count := count - 1
        OD
        	

_lrotr
^^^^^^
:Tech: Other
:Category: Shift
:Header: immintrin.h
:Return Type: unsigned long
:Param Types:
    unsigned long a, 
    int shift
:Param ETypes:
    UI32 a, 
    IMM shift

.. code-block:: C

    unsigned long _lrotr(unsigned long a, int shift);

.. admonition:: Intel Description

    Shift the bits of unsigned long integer "a" right by the number of bits specified in "shift", rotating the least-significant bit to the most-significant bit location, and store the unsigned result in "dst".

.. admonition:: Intel Implementation Psudeo-Code

    .. code-block:: text

        // size := 32 or 64
        dst := a
        count := shift AND (size - 1)
        DO WHILE (count > 0)
        	tmp[size - 1] := dst[0]
        	dst := (dst >> 1) OR tmp[size - 1]
        	count := count - 1
        OD
        	

_rotl
^^^^^
:Tech: Other
:Category: Shift
:Header: immintrin.h
:Return Type: unsigned int
:Param Types:
    unsigned int a, 
    int shift
:Param ETypes:
    UI32 a, 
    IMM shift

.. code-block:: C

    unsigned int _rotl(unsigned int a, int shift);

.. admonition:: Intel Description

    Shift the bits of unsigned 32-bit integer "a" left by the number of bits specified in "shift", rotating the most-significant bit to the least-significant bit location, and store the unsigned result in "dst".

.. admonition:: Intel Implementation Psudeo-Code

    .. code-block:: text

        
        dst := a
        count := shift AND 31
        DO WHILE (count > 0)
        	tmp[0] := dst[31]
        	dst := (dst << 1) OR tmp[0]
        	count := count - 1
        OD
        	

_rotr
^^^^^
:Tech: Other
:Category: Shift
:Header: immintrin.h
:Return Type: unsigned int
:Param Types:
    unsigned int a, 
    int shift
:Param ETypes:
    UI32 a, 
    IMM shift

.. code-block:: C

    unsigned int _rotr(unsigned int a, int shift);

.. admonition:: Intel Description

    Shift the bits of unsigned 32-bit integer "a" right by the number of bits specified in "shift", rotating the least-significant bit to the most-significant bit location, and store the unsigned result in "dst".

.. admonition:: Intel Implementation Psudeo-Code

    .. code-block:: text

        
        dst := a
        count := shift AND 31
        DO WHILE (count > 0)
        	tmp[31] := dst[0]
        	dst := (dst >> 1) OR tmp
        	count := count - 1
        OD
        	

_rotwl
^^^^^^
:Tech: Other
:Category: Shift
:Header: immintrin.h
:Return Type: unsigned short
:Param Types:
    unsigned short a, 
    int shift
:Param ETypes:
    UI16 a, 
    IMM shift

.. code-block:: C

    unsigned short _rotwl(unsigned short a, int shift);

.. admonition:: Intel Description

    Shift the bits of unsigned 16-bit integer "a" left by the number of bits specified in "shift", rotating the most-significant bit to the least-significant bit location, and store the unsigned result in "dst".

.. admonition:: Intel Implementation Psudeo-Code

    .. code-block:: text

        
        dst := a
        count := shift AND 15
        DO WHILE (count > 0)
        	tmp[0] := dst[15]
        	dst := (dst << 1) OR tmp[0]
        	count := count - 1
        OD
        	

_rotwr
^^^^^^
:Tech: Other
:Category: Shift
:Header: immintrin.h
:Return Type: unsigned short
:Param Types:
    unsigned short a, 
    int shift
:Param ETypes:
    UI16 a, 
    IMM shift

.. code-block:: C

    unsigned short _rotwr(unsigned short a, int shift);

.. admonition:: Intel Description

    Shift the bits of unsigned 16-bit integer "a" right by the number of bits specified in "shift", rotating the least-significant bit to the most-significant bit location, and store the unsigned result in "dst".

.. admonition:: Intel Implementation Psudeo-Code

    .. code-block:: text

        
        dst := a
        count := shift AND 15
        DO WHILE (count > 0)
        	tmp[15] := dst[0]
        	dst := (dst >> 1) OR tmp
        	count := count - 1
        OD
        	

_rotl64
^^^^^^^
:Tech: Other
:Category: Shift
:Header: immintrin.h
:Return Type: unsigned __int64
:Param Types:
    unsigned __int64 a, 
    int shift
:Param ETypes:
    UI64 a, 
    IMM shift

.. code-block:: C

    unsigned __int64 _rotl64(unsigned __int64 a, int shift);

.. admonition:: Intel Description

    Shift the bits of unsigned 64-bit integer "a" left by the number of bits specified in "shift", rotating the most-significant bit to the least-significant bit location, and store the unsigned result in "dst".

.. admonition:: Intel Implementation Psudeo-Code

    .. code-block:: text

        
        dst := a
        count := shift AND 63
        DO WHILE (count > 0)
        	tmp[0] := dst[63]
        	dst := (dst << 1) OR tmp[0]
        	count := count - 1
        OD
        	

_rotr64
^^^^^^^
:Tech: Other
:Category: Shift
:Header: immintrin.h
:Return Type: unsigned __int64
:Param Types:
    unsigned __int64 a, 
    int shift
:Param ETypes:
    UI64 a, 
    IMM shift

.. code-block:: C

    unsigned __int64 _rotr64(unsigned __int64 a, int shift);

.. admonition:: Intel Description

    Shift the bits of unsigned 64-bit integer "a" right by the number of bits specified in "shift", rotating the least-significant bit to the most-significant bit location, and store the unsigned result in "dst".

.. admonition:: Intel Implementation Psudeo-Code

    .. code-block:: text

        
        dst := a
        count := shift AND 63
        DO WHILE (count > 0)
        	tmp[63] := dst[0]
        	dst := (dst >> 1) OR tmp[63]
        	count := count - 1
        OD
        	

